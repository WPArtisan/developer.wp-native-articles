<?php

/**
 * If it's a multisite install this sets up all
 * the multisite menus, settings, pages and dashboards etc.
 *
 * @author OzTheGreat
 * @since  0.0.1
 */

class WPNA_Multisite_Admin {

	/**
	 * Sets up the class
	 *
	 * @access public
	 * @return null
	 */
	public function __construct() {
		$this->hooks();
	}

	/**
	 * Register hooks here
	 *
	 * @access public
	 * @return null
	 */
	public function hooks() {
		add_action( 'admin_init',              array( $this, 'register_multisite_settings' ), 10, 0 );
		add_action( 'load-toplevel_page_wpna', array( $this, 'notices'), 10, 0 );
		add_action( 'network_admin_menu',      array( $this, 'register_multisite_menu_items' ), 10, 0 );
		add_action( 'network_admin_edit_wpna', array( $this, 'save_ms_settings_callback' ), 10, 1 );
		add_action( 'network_admin_edit_wpna', array( $this, 'reset_ms_blog_callback' ), 10, 1 );
		add_action( 'wpmu_new_blog',           array( $this, 'new_blog_defaults' ), 10, 6 );

		add_filter( 'admin_menu',              array( $this, 'admin_page_capability' ), 999, 0 );
	}

	/**
	 * Register the settings, sections and fields
	 *
	 * @access public
	 * @return null
	 */
	public function register_multisite_settings() {
		register_setting( 'wpna_ms_settings', 'wpna_ms_settings', array( $this, 'validate_ms_settings_callback' ) );

		add_settings_section(
			'ms_settings',
			__( 'Multisite Settings', 'wp-native-articles' ),
			array( $this, 'ms_settings_section_callback' ),
			'wpna_ms_settings'
		);

		add_settings_field(
			'access_level',
			sprintf( '<label for="access_level">%s</label>', esc_html__( 'Access Level', 'wp-native-articles' ) ),
			array( $this, 'access_level_field_callback' ),
			'wpna_ms_settings',
			'ms_settings'
		);

		add_settings_field(
			'inherit_id',
			sprintf( '<label for="inheit_id">%s</label>', esc_html__( 'Inherit ID', 'wp-native-articles' ) ),
			array( $this, 'inherit_id_field_callback' ),
			'wpna_ms_settings',
			'ms_settings'
		);

		register_setting( 'wpna_ms_reset', 'wpna_ms_reset', array( $this, 'validate_ms_reset_callback' ) );

		add_settings_section(
			'ms_reset',
			__( 'Reset Blog Settings', 'wp-native-articles' ),
			array( $this, 'ms_blog_reset_section_callback' ),
			'wpna_ms_reset'
		);

		add_settings_field(
			'reset_blog_id',
			sprintf( '<label for="reset_blog_id">%s</label>', esc_html__( 'Blog ID', 'wp-native-articles' ) ),
			array( $this, 'reset_blog_id_field_callback' ),
			'wpna_ms_reset',
			'ms_reset'
		);

	}

	/**
	 * Checks the URL params to see if any custom notices should be shown
	 *
	 * @access public
	 * @return null
	 */
	public function notices() {
		if ( empty( $_REQUEST['notice'] ) )
			return;

		switch ( $_REQUEST['notice'] ) {
			case 'wpna_ms_settings_success':
				add_settings_error( 'wp-native-articles-notices', 'wpna_ms_settings_success', esc_html__( 'Multisite settings updated successfully.', 'wp-native-articles' ), 'updated' );
				break;

			case 'wpna_ms_settings_error':
				add_settings_error( 'wp-native-articles-notices', 'wpna_ms_settings_error', esc_html__( 'Error updating multisite settings.', 'wp-native-articles' ), 'error' );
				break;

			case 'wpna_ms_reset_success':
				add_settings_error( 'wp-native-articles-notices', 'wpna_ms_reset_success', esc_html__( 'Blog settings successfully reset.', 'wp-native-articles' ), 'updated' );
				break;

			case 'wpna_ms_reset_error_missing_id':
				add_settings_error( 'wp-native-articles-notices', 'wpna_ms_reset_error_missing_id', esc_html__( 'Error: Please provide a blog ID to reset.', 'wp-native-articles' ), 'error' );
				break;


			default:

				/**
				 * Add any custom notices in here
				 *
				 * @param string The notice key
				 */
				do_action( 'wpna_network_admin_notices', $_REQUEST['notice'] );

				break;
		}
	}

	/**
	 * Registers custom menu items for the multisite menu
	 *
	 * @access public
	 * @return null
	 */
	public function register_multisite_menu_items() {
		$settings_page = add_menu_page(
			__( 'Multisite Settings', 'wp-native-articles' ),
			__( 'Native Articles', 'wp-native-articles' ),
			'manage_options',
			'wpna',
			array( $this, 'ms_dashboard_page_callback' ),
			'',
			89
		);
	}

	/**
	 * Dashboard page HTML and layout
	 *
	 * @access public
	 * @return null
	 */
	public function ms_dashboard_page_callback() {
		?>
		<h1><?php esc_html_e( 'Multisite Settings', 'wp-native-articles' ); ?></h1>
		<?php settings_errors(); ?>
		<div class="wrap">
			<form action="<?php echo esc_url_raw( network_admin_url( 'edit.php?action=wpna' ) ); ?>" method="post">
				<?php settings_fields( 'wpna_ms_settings' ); ?>
				<?php do_settings_sections( 'wpna_ms_settings' ); ?>
				<?php submit_button( esc_html__( 'Save Multisite Settings', 'wp-native-articles' ), 'primary', 'save_ms_settings' ); ?>
			</form>
			<form action="<?php echo esc_url_raw( network_admin_url( 'edit.php?action=wpna' ) ); ?>" method="post">
				<?php settings_fields( 'wpna_ms_reset' ); ?>
				<?php do_settings_sections( 'wpna_ms_reset' ); ?>
				<?php submit_button( esc_html__( 'Reset Site to Defaults', 'wp-native-articles' ), 'secondary', 'reset_ms_settings' ); ?>
			</form>

			<?php
				/**
				 * Action to add anymore fields to the Multisite admin page
				 */
				do_action( 'wpna_network_admin_page_callback' );
			?>

		</div>
		<?php
	}

	/**
	 * Output any HTML to sit above this section
	 *
	 * @access public
	 * @return null
	 */
	public function ms_settings_section_callback() {
		// nothing doin'
	}

	/**
	 * Shows the HTML for the access_level input
	 *
	 * @access public
	 * @return null
	 */
	public function access_level_field_callback( $args ) {
		$options = get_site_option( 'wpna_options' );
		$value = isset( $options['access_level'] ) ? $options['access_level'] : null;
		?>
		<select name="wpna_options[access_level]" id="access_level">
			<option value="administrator"<?php selected( $value, 'administrator' ); ?>><?php esc_html_e( 'Administrator', 'wp-native-articles' ); ?></option>
			<option value="network_administrator"<?php selected( $value, 'network_administrator' ); ?>><?php esc_html_e( 'Network Administrator', 'wp-native-articles' ); ?></option>
		</select>
		<p class="description"><?php esc_html_e( 'The minimum user role required to change native article settings.', 'wp-native-articles' ); ?></p>
		<?php
	}

	/**
	 * Shows the HTML for the inherit_id input
	 *
	 * @access public
	 * @return null
	 */
	public function inherit_id_field_callback( $args ) {
		$options = get_site_option( 'wpna_options' );
		$value = isset( $options['inherit_id'] ) ? $options['inherit_id'] : get_current_blog_id();
		?>
		<input type="number" id="inheit_id" name="wpna_options[inherit_id]" value="<?php echo absint( $value ); ?>" min="0" class="regular-text">
		<p class="description"><?php esc_html_e( 'When creating a new site inherit settings from this site.', 'wp-native-articles' ); ?></p>
		<?php
	}

	/**
	 * Validates and cleans data from the multisite settings form.
	 *
	 * @access public
	 * @param  array $data
	 * @return array
	 */
	public function validate_ms_settings_callback( $data ) {

		$values = array();

		if ( ! empty( $data['access_level'] ) ) {
			$values['access_level'] = in_array( $data['access_level'], array( 'administrator', 'network_administrator' ) ) ? $data['access_level'] : 'administrator' ;
		}

		if ( ! empty( $data['inherit_id'] ) ) {
			$values['inherit_id'] = absint( $data['inherit_id'] );
		}

		return $values;
	}

	/**
	 * Saves the multisite settings and redirects back
	 * with any appropriate messages.
	 *
	 * @access public
	 * @return null
	 */
	public function save_ms_settings_callback() {
		if ( empty( $_POST['save_ms_settings'] ) )
			return;

		check_admin_referer('wpna_ms_settings-options');

		// Filter and sanitize the values
		$values = apply_filters( 'sanitize_option_wpna_ms_settings', $_POST['wpna_options'] );

		// Save options
		$updated = update_site_option( 'wpna_options', $values );

		wp_safe_redirect(
			add_query_arg(
				array( 'page' => 'wpna', 'notice' => $updated ? 'wpna_ms_settings_success' : 'wpna_ms_settings_error' ),
				network_admin_url( 'admin.php' )
			)
		);

		exit;
	}

	/**
	 * Output any HTML to sit above this section
	 *
	 * @access public
	 * @return null
	 */
	public function ms_blog_reset_section_callback() {
		esc_html_e( 'Here you can reset ALL Native Article settings for a particular blog to the same as the Inherit ID blog above.', 'wp-native-articles' );
	}

	/**
	 * Shows the HTML for the reset_blog[id] input
	 *
	 * @access public
	 * @return null
	 */
	public function reset_blog_id_field_callback() {
		?>
		<input type="number" name="reset_blog[id]" value="" min="0" class="regular-text" />
		<?php
	}

	/**
	 * Validates and cleans data from the blog reset form.
	 *
	 * @access public
	 * @param  array $data
	 * @return array
	 */
	public function validate_ms_reset_callback( $data ) {

		if ( ! empty( $data['id'] ) )
			$data['id'] = absint( $data['id'] );

		return $data;
	}

	/**
	 * Resets the chosen blog and redirects back
	 * with any appropriate messages.
	 *
	 * @access public
	 * @return null
	 */
	public function reset_ms_blog_callback() {
		if ( empty( $_POST['reset_ms_settings'] ) )
			return;

		// Make sure they're a super admin
		if ( ! is_super_admin() )
			return;

		check_admin_referer('wpna_ms_reset-options');

		// Filter and sanitize the values
		$values = apply_filters( 'sanitize_option_wpna_ms_reset', $_POST['reset_blog'] );

		if ( empty( $values['id'] ) ) {
			$notice = 'wpna_ms_reset_error_missing_id';
		} else {
			$options = get_site_option( 'wpna' );
			$souce_blog_id = isset( $options['inherit_id'] ) ? $options['inherit_id'] : get_current_blog_id();
			$this->set_blog_defaults( $souce_blog_id, $values['id'] );
			$notice = 'wpna_ms_reset_success';
		}

		wp_safe_redirect(
			add_query_arg(
				array( 'page' => 'wpna', 'notice' => $notice ),
				network_admin_url( 'admin.php' )
			)
		);

		exit;
	}

	/**
	 * When creating a new site, copy all `wpna` options
	 * from the default network site, (if it exists);
	 *
	 * @access public
	 * @param int    $blog_id
	 * @param int    $user_id
	 * @param string $domain
	 * @param string $path
	 * @param int    $site_id
	 * @param array  $meta
	 * @return null
	 */
	public function new_blog_defaults( $blog_id, $user_id, $domain, $path, $site_id, $meta ) {
		$options = get_site_option( 'wpna_options' );
		$souce_blog_id = isset( $options['inherit_id'] ) ? $options['inherit_id'] : get_current_blog_id();
		$this->set_blog_defaults( $souce_blog_id, $blog_id );
	}

	/**
	 * Copies all `wpna` options from one blog to another.
	 * If you need to filter this us the built in update_option filters
	 *
	 * @access public
	 * @param  int $source_blog_id The ID of the blog to copy the options from
	 * @param  int $target_blog_id The ID of the blog to copy the options to
	 * @return null
	 */
	public function set_blog_defaults( $source_blog_id, $target_blog_id ) {
		$options = get_blog_option( $source_blog_id, 'wpna_options' );
		update_blog_option( $target_blog_id, 'wpna_options', $options );
	}

	/**
	 * Checks to see who should be able to access the admin
	 * menu of the plugin and updates the capabilities accordingly
	 *
	 * @access public
	 * @return null
	 */
	public function admin_page_capability() {
		$options = get_site_option( 'wpna_options' );

		// Default to administrator
		$access_level = 'manage_options';
		if ( ! empty( $options['access_level'] ) ) {
			if ( 'network_administrator' == $options['access_level'] ) {
				$access_level = 'manage_network_options';
			}
		}

		// Hide the menu if the current user can't access it
		if ( ! current_user_can( $access_level ) ) {

			global $submenu;

			remove_menu_page('wp_native_articles');

			// Still need to update cap requirements even when hidden
			if ( ! empty( $submenu['wp_native_articles'] ) ) {
				foreach ( $submenu['wp_native_articles'] as $position => $data ) {
					$submenu['wp_native_articles'][ $position ][1] = $access_level;
				}
			}
		}

	}

}

